/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"expressions":4,"EOF":5,"expression":6,"NEW_LINE":7,"operator":8,"assign_statment":9,"function":10,"class":11,"+":12,"-":13,"*":14,"/":15,"factor":16,"=":17,"+=":18,"-=":19,"*=":20,"/=":21,"NUMBER":22,"STRING":23,"NULL":24,"boolean":25,"identifier":26,"BASE":27,".":28,"function_call":29,"new_class":30,"TRUE":31,"FALSE":32,"IDENTIFIER":33,"FUNCTION":34,"(":35,"parameter_names":36,")":37,"END":38,"CLASS":39,"EXTENDS":40,",":41,"parameters":42,"NEW":43,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"NEW_LINE",12:"+",13:"-",14:"*",15:"/",17:"=",18:"+=",19:"-=",20:"*=",21:"/=",22:"NUMBER",23:"STRING",24:"NULL",27:"BASE",28:".",31:"TRUE",32:"FALSE",33:"IDENTIFIER",34:"FUNCTION",35:"(",37:")",38:"END",39:"CLASS",40:"EXTENDS",41:",",43:"NEW"},
productions_: [0,[3,2],[4,0],[4,1],[4,3],[4,2],[6,1],[6,1],[6,1],[6,1],[8,3],[8,3],[8,3],[8,3],[8,2],[8,1],[9,3],[9,3],[9,3],[9,3],[9,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,3],[16,3],[16,1],[16,1],[25,1],[25,1],[26,1],[10,6],[11,3],[11,5],[36,0],[36,1],[36,3],[29,4],[30,6],[42,0],[42,1],[42,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new Node.Program($$[$0-1]) 
break;
case 2: this.$ = [] 
break;
case 3: this.$ = [ $$[$0] ] 
break;
case 4: this.$ = $$[$0-2].concat($$[$0]) 
break;
case 5: this.$ = $$[$0-1] 
break;
case 10: this.$ = new Node.Plus($$[$0-2], $$[$0]) 
break;
case 11: this.$ = new Node.Minus($$[$0-2], $$[$0]) 
break;
case 12: this.$ = new Node.Multiply($$[$0-2], $$[$0]) 
break;
case 13: this.$ = new Node.Divide($$[$0-2], $$[$0]) 
break;
case 14: this.$ = new Node.Uminus($$[$0]) 
break;
case 16: this.$ = new Node.Assign($$[$0-2], $$[$0]) 
break;
case 17: this.$ = new Node.Assign($$[$0-2], new Node.Plus($$[$0-2], $$[$0])) 
break;
case 18: this.$ = new Node.Assign($$[$0-2], new Node.Minus($$[$0-2], $$[$0])) 
break;
case 19: this.$ = new Node.Assign($$[$0-2], new Node.Multiply($$[$0-2], $$[$0])) 
break;
case 20: this.$ = new Node.Assign($$[$0-2], new Node.Divide($$[$0-2], $$[$0])) 
break;
case 21: this.$ = new Node.Number(Number($$[$0])) 
break;
case 22: this.$ = new Node.String($$[$0]) 
break;
case 23: this.$ = new Node.Null() 
break;
case 26: this.$ = new Node.BaseGetMember($$[$0]) 
break;
case 27: this.$ = new Node.GetMember($$[$0-2], $$[$0]) 
break;
case 30: this.$ = new Node.Boolean(true) 
break;
case 31: this.$ = new Node.Boolean(false) 
break;
case 32: this.$ = new Node.Identifier($$[$0]) 
break;
case 33: this.$ = new Node.Function($$[$0-1], $$[$0-3]) 
break;
case 34: this.$ = new Node.Class($$[$0-1]) 
break;
case 35: this.$ = new Node.Class($$[$0-1], $$[$0-2]) 
break;
case 36: this.$ = [] 
break;
case 37: this.$ = [ $$[$0] ] 
break;
case 38: this.$ = $$[$0-2].concat($$[$0]) 
break;
case 39: this.$ = new Node.FunctionCall($$[$0-3], $$[$0-1]) 
break;
case 40: this.$ = new Node.NewClass($$[$0-5], $$[$0-1]) 
break;
case 41: this.$ = [] 
break;
case 42: this.$ = [ $$[$0] ] 
break;
case 43: this.$ = $$[$0-2].concat($$[$0]) 
break;
}
},
table: [{3:1,4:2,5:[2,2],6:3,7:[2,2],8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{1:[3]},{5:[1,23],7:[1,24]},{5:[2,3],7:[2,3],12:[1,25],13:[1,26],14:[1,27],15:[1,28],17:[1,29],18:[1,30],19:[1,31],20:[1,32],21:[1,33],38:[2,3]},{5:[2,6],7:[2,6],12:[2,6],13:[2,6],14:[2,6],15:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],21:[2,6],38:[2,6]},{5:[2,7],7:[2,7],12:[2,7],13:[2,7],14:[2,7],15:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],21:[2,7],38:[2,7]},{5:[2,8],7:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],17:[2,8],18:[2,8],19:[2,8],20:[2,8],21:[2,8],38:[2,8]},{5:[2,9],7:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],17:[2,9],18:[2,9],19:[2,9],20:[2,9],21:[2,9],38:[2,9]},{6:34,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{5:[2,15],7:[2,15],12:[2,15],13:[2,15],14:[2,15],15:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],28:[1,35],35:[1,36],38:[2,15]},{35:[1,37]},{4:38,6:3,7:[2,2],8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],38:[2,2],39:[1,11],40:[1,39]},{5:[2,21],7:[2,21],12:[2,21],13:[2,21],14:[2,21],15:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],27:[2,21],28:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[2,21],37:[2,21],38:[2,21],39:[2,21],41:[2,21]},{5:[2,22],7:[2,22],12:[2,22],13:[2,22],14:[2,22],15:[2,22],17:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],27:[2,22],28:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],35:[2,22],37:[2,22],38:[2,22],39:[2,22],41:[2,22]},{5:[2,23],7:[2,23],12:[2,23],13:[2,23],14:[2,23],15:[2,23],17:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],27:[2,23],28:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23],35:[2,23],37:[2,23],38:[2,23],39:[2,23],41:[2,23]},{5:[2,24],7:[2,24],12:[2,24],13:[2,24],14:[2,24],15:[2,24],17:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],27:[2,24],28:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[2,24],37:[2,24],38:[2,24],39:[2,24],41:[2,24]},{5:[2,25],7:[2,25],12:[2,25],13:[2,25],14:[2,25],15:[2,25],17:[2,25],18:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],27:[2,25],28:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],37:[2,25],38:[2,25],39:[2,25],41:[2,25]},{28:[1,40]},{5:[2,28],7:[2,28],12:[2,28],13:[2,28],14:[2,28],15:[2,28],17:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],27:[2,28],28:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],37:[2,28],38:[2,28],39:[2,28],41:[2,28]},{5:[2,29],7:[2,29],12:[2,29],13:[2,29],14:[2,29],15:[2,29],17:[2,29],18:[2,29],19:[2,29],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],27:[2,29],28:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],37:[2,29],38:[2,29],39:[2,29],41:[2,29]},{5:[2,30],7:[2,30],12:[2,30],13:[2,30],14:[2,30],15:[2,30],17:[2,30],18:[2,30],19:[2,30],20:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],27:[2,30],28:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],37:[2,30],38:[2,30],39:[2,30],41:[2,30]},{5:[2,31],7:[2,31],12:[2,31],13:[2,31],14:[2,31],15:[2,31],17:[2,31],18:[2,31],19:[2,31],20:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],27:[2,31],28:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],37:[2,31],38:[2,31],39:[2,31],41:[2,31]},{5:[2,32],7:[2,32],12:[2,32],13:[2,32],14:[2,32],15:[2,32],17:[2,32],18:[2,32],19:[2,32],20:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],27:[2,32],28:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],37:[2,32],38:[2,32],39:[2,32],41:[2,32]},{1:[2,1]},{5:[2,5],6:41,7:[2,5],8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],38:[2,5],39:[1,11]},{6:42,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{6:43,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{6:44,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{6:45,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{6:46,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{6:47,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{6:48,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{6:49,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{6:50,8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],39:[1,11]},{5:[2,14],7:[2,14],12:[2,14],13:[2,14],14:[2,14],15:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],21:[2,14],38:[2,14]},{26:51,33:[1,22],43:[1,52]},{16:54,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],37:[2,41],41:[2,41],42:53},{26:56,33:[1,22],36:55,37:[2,36],41:[2,36]},{7:[1,24],38:[1,57]},{16:58,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22]},{26:59,33:[1,22]},{5:[2,4],7:[2,4],12:[1,25],13:[1,26],14:[1,27],15:[1,28],17:[1,29],18:[1,30],19:[1,31],20:[1,32],21:[1,33],38:[2,4]},{5:[2,10],7:[2,10],12:[2,10],13:[2,10],14:[1,27],15:[1,28],17:[2,10],18:[2,10],19:[2,10],20:[2,10],21:[2,10],38:[2,10]},{5:[2,11],7:[2,11],12:[2,11],13:[2,11],14:[1,27],15:[1,28],17:[2,11],18:[2,11],19:[2,11],20:[2,11],21:[2,11],38:[2,11]},{5:[2,12],7:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],21:[2,12],38:[2,12]},{5:[2,13],7:[2,13],12:[2,13],13:[2,13],14:[2,13],15:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],21:[2,13],38:[2,13]},{5:[2,16],7:[2,16],12:[1,25],13:[1,26],14:[1,27],15:[1,28],17:[1,29],18:[1,30],19:[1,31],20:[1,32],21:[1,33],38:[2,16]},{5:[2,17],7:[2,17],12:[1,25],13:[1,26],14:[1,27],15:[1,28],17:[2,17],18:[1,30],19:[1,31],20:[1,32],21:[1,33],38:[2,17]},{5:[2,18],7:[2,18],12:[1,25],13:[1,26],14:[1,27],15:[1,28],17:[2,18],18:[1,30],19:[1,31],20:[1,32],21:[1,33],38:[2,18]},{5:[2,19],7:[2,19],12:[1,25],13:[1,26],14:[1,27],15:[1,28],17:[2,19],18:[2,19],19:[2,19],20:[1,32],21:[1,33],38:[2,19]},{5:[2,20],7:[2,20],12:[1,25],13:[1,26],14:[1,27],15:[1,28],17:[2,20],18:[2,20],19:[2,20],20:[1,32],21:[1,33],38:[2,20]},{5:[2,27],7:[2,27],12:[2,27],13:[2,27],14:[2,27],15:[2,27],17:[2,27],18:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],27:[2,27],28:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],37:[2,27],38:[2,27],39:[2,27],41:[2,27]},{35:[1,60]},{37:[1,61],41:[1,62]},{28:[1,35],35:[1,36],37:[2,42],41:[2,42]},{37:[1,63],41:[1,64]},{37:[2,37],41:[2,37]},{5:[2,34],7:[2,34],12:[2,34],13:[2,34],14:[2,34],15:[2,34],17:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34],38:[2,34]},{4:65,6:3,7:[2,2],8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],28:[1,35],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],35:[1,36],38:[2,2],39:[1,11]},{5:[2,26],7:[2,26],12:[2,26],13:[2,26],14:[2,26],15:[2,26],17:[2,26],18:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],27:[2,26],28:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],37:[2,26],38:[2,26],39:[2,26],41:[2,26]},{16:54,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],37:[2,41],41:[2,41],42:66},{5:[2,39],7:[2,39],12:[2,39],13:[2,39],14:[2,39],15:[2,39],17:[2,39],18:[2,39],19:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],27:[2,39],28:[2,39],31:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],37:[2,39],38:[2,39],39:[2,39],41:[2,39]},{16:67,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22]},{4:68,6:3,7:[2,2],8:4,9:5,10:6,11:7,13:[1,8],16:9,22:[1,12],23:[1,13],24:[1,14],25:15,26:16,27:[1,17],29:18,30:19,31:[1,20],32:[1,21],33:[1,22],34:[1,10],38:[2,2],39:[1,11]},{26:69,33:[1,22]},{7:[1,24],38:[1,70]},{37:[1,71],41:[1,62]},{28:[1,35],35:[1,36],37:[2,43],41:[2,43]},{7:[1,24],38:[1,72]},{37:[2,38],41:[2,38]},{5:[2,35],7:[2,35],12:[2,35],13:[2,35],14:[2,35],15:[2,35],17:[2,35],18:[2,35],19:[2,35],20:[2,35],21:[2,35],38:[2,35]},{5:[2,40],7:[2,40],12:[2,40],13:[2,40],14:[2,40],15:[2,40],17:[2,40],18:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],27:[2,40],28:[2,40],31:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],37:[2,40],38:[2,40],39:[2,40],41:[2,40]},{5:[2,33],7:[2,33],12:[2,33],13:[2,33],14:[2,33],15:[2,33],17:[2,33],18:[2,33],19:[2,33],20:[2,33],21:[2,33],38:[2,33]}],
defaultActions: {23:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var Node = require('../node/node').Node
  exports.Node = Node

  var Runtime = require('../runtime/runtime').Runtime
  require('../node/interpreter').apply(Node, Runtime)

  exports.Runtime = Runtime
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// skip
break;
case 1:// skip
break;
case 2:return 7
break;
case 3:return 33
break;
case 4:return yy_.yytext.toUpperCase()
break;
case 5:return 22
break;
case 6:return 23
break;
case 7:return 23
break;
case 8:return 33
break;
case 9:return yy_.yytext
break;
case 10:return yy_.yytext
break;
case 11:return 5
break;
}
},
rules: [/^(?:(#).*)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:(function|end|if|and|or|true|false|null|class|extends|new|base|while\b)+[\w\_]+)/,/^(?:(function|end|if|and|or|true|false|null|class|extends|new|base|while\b))/,/^(?:([0-9])+(\.([0-9])+)?)/,/^(?:"[^"]*")/,/^(?:'[^']*')/,/^(?:[a-zA-Z\_][\w\_]*)/,/^(?:(\|\||&&|[<]=|[>]=|==|!=|\+=|-=|\*=|\/=))/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}